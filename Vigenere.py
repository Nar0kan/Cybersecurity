class Vigenere_cipher():
    """Класс шифру Віженера."""
    def __init__(self, alphabet: str, message: str, key: str) -> None:
        """Ініціалізація переданих аргументів об'єкту класу."""
        self.alphabet = alphabet.upper()
        self.message = message.upper()
        self.key = key.upper()
    

    def translate(self, mode: str) -> str:
        """Головна функція-оператор, що приймає як аргумент дію для повідомлення \
        і повертає відповідно перекладене (зашифроване чи розшифроване) повідомлення."""
        temp_message = ''                               # Змінна для збереження тимчасово-оберненого повідомлення.
        index = 0                                       # Змінна для побічного ітератора.

        for symbol in self.message:                     # Перебираємо посимвольно повідомлення.
            number = self.alphabet.find(symbol)            # Присвоюємо змінній "число" значення індексу ітерованого символа у повідомленні.
            if number != -1:                               # Перевіряємо чи "число" не являє собою останній елемент повідомлення.
                if mode == 'encrypt':                               # Якщо вибрано опцію "зашифрувати".
                    number += self.alphabet.find(self.key[index])      # До "числа" додаємо значеня "індексу" від ключа у алфавіті.
                elif mode == 'decrypt':                             # Якщо вибрано опцію "розшифрувати".
                    number -= self.alphabet.find(self.key[index])      # Від "числа" віднімаємо значення пошуку по алфавіту ключа з "індексом".

                number = number%len(self.alphabet)                  # Ділимо націло "число" на довжину алфавіту.
                temp_message += self.alphabet[number]                  # Конкатенуємо знайдене за "числом" значення відповідного символу у алфавіті до результату.
                index += 1                                          # Ітеруємо "індекс".
                if index == len(self.key):                          # Оновлюємо індекс коли він досягає значення довжини ключа.
                    index = 0                                       
            else:                                                   
                temp_message += symbol                              # Якщо символ є останнім елементом повідомлення, то конкатенуємо його до результату.

        self.message = temp_message                                 # Прирівнюємо значення повідомлення об'єкту класу до результату.
        return self.message                                         # Повертаємо результат (якщо треба вивести чи прирівняти).


    def encrypt(self):
        return self.translate('encrypt')                            # Передача керування функції для шифрування повідомлення.
    

    def decrypt(self):
        return self.translate('decrypt')                            # Передача керування функції для дешифрування повідомлення.


def main():
    """Головна функція, що стартує після запуску файлу в інтерпретаторі."""
    alphabet = "АБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯ., "
    string = "Я студент університету".upper()
    keyword = "Кіріченко".upper()
    print(f"Алфавіт: {alphabet}\nВхідне повідомлення: {string}\nКлючове слово: {keyword}\n\n")

    data = Vigenere_cipher(alphabet, string, keyword)                   # Створення об'єкту класу для шифрування методом Віженера

    print("Зашифроване повідомлення: ", data.encrypt())             # Виведення зашифрованого повідомлення
    print("Розшифроване повідомлення: ", data.decrypt())            # Виведення розшифрованого повідомлення


if __name__ == "__main__":
    main()